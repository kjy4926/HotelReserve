#애플리케이션의 포트 설정
server.port = 80

# properties 파일에 특정 의미가 정해지지 않은 변수를 선언 한 것
# @Value 어노테이션을 통해 application.name에 선언된 값을 읽어올 수 있음
# 사용법 
# @Value("${application.name}")
# private String value;
# 하면 value라는 변수 안에 spring-demo가 들어감 
application.name=spring-demo

# spring project의 view-resolver에서 prefix와 suffix를 지정했던 것이 이 파일에서 가능해짐
# 최상위 경로 / = /(프로젝트 폴더명)/src/main/webapp/
spring.mvc.view.prefix=/WEB-INF/views/
spring.mvc.view.suffix=.jsp

# DB Connection
# pom.xml에 com.oracle.database.jdbc 의존설정 되어있으면 필수로 추가해야 함
spring.datasource.driver-class-name=oracle.jdbc.OracleDriver
# host이름, 포트번호, sid
spring.datasource.url=jdbc:oracle:thin:@localhost:1521/xe
# 계정이름
spring.datasource.username=c##hoteladmin
# 비밀번호
spring.datasource.password=1357

# 실행되는 쿼리를 콘솔창에 출력 및 형식 설정
# jpa나 hibernate를 통해 CRUD를 실행하면 해당 CRUD의 sql을 로깅으로 보여준다.
spring.jpa.properties.hibernate.show_sql=true
# 로깅에 표시되는 sql을 보기 좋게 표시해준다. 예)sql 구절마다 줄바꿈해준다던가
spring.jpa.properties.hibernate.format_sql=true

# hibernate가 보여주는 로그에 있는 ?에 어떤 값이 들어갔는지 구체적으로 알고 싶을 때 사용하는 옵션
logging.level.org.hibernate.type.descriptor.sql=trace

# spring.jpa.hibernate.ddl-auto = 옵션 :
# 옵션에 따라 데이터베이스 초기화 전략을 설정 
# - create : 기존 테이블 삭제 후 테이블 생성, 테이블이 없을 경우도 테이블 생성
# - create-drop : 기존 테이블 삭제 후 테이블 생성, 테이블이 없을 경우도 테이블 생성. 종료 시점에 테이블 삭제
# - validate : application 실행시 @Entity들과 이미 존재하는 테이블(schema)가 정상적으로 맵핑되었는지 판단하여
# 만약 @Entity와 테이블이 제대로 맵핑 되지 않으면 application이 실행되지 않는다.
# - update : 이미 테이블이 존재하는 상황에서 @Entity에 속성이 추가될 경우, 
# 기존 테이블의 데이터에는 변화 없이 새로운 Column을 추가 한다.
# - none : 아무것도 하지 않는다.
spring.jpa.hibernate.ddl-auto=update
# SQL은 표준 SQL과 DBMS 벤더(예)Oracle)에서 제공하는 SQL이 존재합니다. 
# 각 공급업체에서 만든 SQL을 방언(Dialect)이라 함.
# JPA에서는 Dialect라는 추상화된 방언 클래스를 제공하고 각 벤더에 맞는 구현체를 제공한다
# JPA에선 설정을 통해 원하는 Dialect만 설정해주면 해당 Dialect를 참고하여 그에 맞는 쿼리를 생성한다.
spring.jpa.database-platform=org.hibernate.dialect.Oracle12cDialect

# OSIV(Open Session In View)는 웹 요청이 완료될 때까지 동일한 EntityManager를 갖도록 해줍니다.
# 스프링부트에서 OSIV가 기본값으로 true인데, 성능과 확장상 면에서 안좋다고 해서 false로 설정을 껏습니다.
spring.jpa.open-in-view=false